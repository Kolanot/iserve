<?xml version="1.0"?>
<wsdl:definitions 
 xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
 xmlns:tns="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0" 
 xmlns:genewiz="http://www.cbs.dtu.dk/ws/ws-genewiz" 
 xmlns:common="http://www.cbs.dtu.dk/ws/ws-common" 
 xmlns:soapenv="http://schemas.xmlsoap.org/wsdl/soap/" 
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
 xmlns="http://schemas.xmlsoap.org/wsdl/" 
 targetNamespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0">


	<wsdl:types>
		<xsd:schema>
			<!-- XSD -->
			<xsd:import namespace="http://www.cbs.dtu.dk/ws/ws-genewiz" schemaLocation="ws_genewiz_1_0a_ws0.xsd"/>
			<!-- XSD -->
			<xsd:import namespace="http://www.cbs.dtu.dk/ws/ws-common" schemaLocation="../common/ws_common_1_0b.xsd"/>
		</xsd:schema>
		<schema 
		targetNamespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0" 
		xmlns="http://www.w3.org/2001/XMLSchema" 
		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
		xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/">
			<xsd:element name="runGenewiz" type="genewiz:runGenewizRequest"/>
			<xsd:element name="runGenewizResponse" type="common:pollQueueResponse"/>

			<xsd:element name="fetchResult" type="common:fetchResult"/>
			<xsd:element name="fetchResultResponse" type="genewiz:fetchResultResponse"/>

			<xsd:element name="pollQueue" type="common:pollQueue"/>
			<xsd:element name="pollQueueResponse" type="common:pollQueueResponse"/>
		</schema>
	</wsdl:types>
	<message name="runGenewizRequest">
		<part name="parameters" element="tns:runGenewiz"/>
	</message>
	<message name="runGenewizResponse">
		<part name="parameters" element="tns:runGenewizResponse"/>
	</message>
	<message name="fetchResultRequest">
		<part name="parameters" element="tns:fetchResult"/>
	</message>
	<message name="fetchResultResponse">
		<part name="parameters" element="tns:fetchResultResponse"/>
	</message>
	<message name="pollQueueRequest">
		<part name="job" element="tns:pollQueue"/>
	</message>
	<message name="pollQueueResponse">
		<part name="queueentry" element="tns:pollQueueResponse"/>
	</message>

	<portType name="WSGeneWiz_1_0a_ws0">
		<operation name="runGenewiz">
			<input name="runGenewizRequest" message="tns:runGenewizRequest"/>
			<output name="runGenewizResponse" message="tns:runGenewizResponse"/>
		</operation>
		<operation name="pollQueue">
			<input name="pollQueueRequest" message="tns:pollQueueRequest"/>
			<output name="pollQueueResponse" message="tns:pollQueueResponse"/>
		</operation>
		<operation name="fetchResult">
			<input name="fetchResultRequest" message="tns:fetchResultRequest"/>
			<output name="fetchResultResponse" message="tns:fetchResultResponse"/>
		</operation>
	</portType>

	<binding name="WSGeneWiz_1_0a_ws0" type="tns:WSGeneWiz_1_0a_ws0">
		<soapenv:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="pollQueue">
			<soapenv:operation soapAction="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0#pollQueue"/>
			<input>
				<soapenv:body use="literal" namespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0"/>
			</input>
			<output>
				<soapenv:body use="literal" namespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0"/>
			</output>
		</operation>
		
		<operation name="runGenewiz">
			<soapenv:operation soapAction="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0#runGenewiz"/>
			<input>
				<soapenv:body use="literal" namespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0"/>
			</input>
			<output>
				<soapenv:body use="literal" namespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0"/>
			</output>
		</operation>
		<operation name="fetchResult">
			<soapenv:operation soapAction="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0#fetchResult"/>
			<input>
				<soapenv:body use="literal" namespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0"/>
			</input>
			<output>
				<soapenv:body use="literal" namespace="http://www.cbs.dtu.dk/ws/WSGeneWiz_1_0a_ws0"/>
			</output>
		</operation>

	</binding>

	<service name="WSGeneWiz_1_0a_ws0">
	<documentation>
		This service provides an external access to the GeneWiz software developed at CBS (Pedersen AG et al. 2000)
    The program visualizes DNA parameters and annotations in either a circular or linear representation. 

   1. runGenewiz
      The atlas can display two conceptually different kinds of information: Annotations and data. Annotations 
      are plotted with a fixed color in the entire range in which it is defined. Annotations are divided into 
      features (e.g. CDS, rRNA, tRNA etc) and features can be assigned different colors, depending on strand. 
      The data displays numerical values which pertains to the individual nucleotides. Data
      is declared in the 'data' section, whereas annotations are declared in the 'annotation' section. The binding of
      the two takes place in the 'lanes' section. In the 'files' section the actual numerical data values and annotation
      coordinates are defined. To link these entities, a reference name is introduced. (called 'ref'). The
      XSD cannot validate if these references are correctly formed. It is essential these references exist and
      are valid. That is, all annotation reference names must exist in both 'annotation' and 
     'files' sections whereas all data reference names must exist in both 'data' and 'files sections.      

      The request message is divided into five major sections, as described below. 

      # general options   : Title, sub title, zoom window, modus etc.
      # annotations       : Declaration of annotation coloring and direction. If you are 
                            in doubt (which is not unlikely), please refer to the example Perl script
                            and use this section as template.
      # data              : This section declares the legend and smoothing of the data to be used for data 
                            lanes. Each entry of the data section must contain a reference name, which MUST 
                            be found also in the lanes and files sections.
      # lanes             : This section specifies the order of lanes. Each lane entry can either be an annotation
                            or a data entry. For annotations, the featurename and an optional direction is specified.
                            For the data lane, the colors and the color scaling method (byrange or byaverage) is
                            specified. 
      # files             : Thie section contains sources for both annotations and data. It contains all the coordinates
                            and feature types of all annotations, and it contains all numerical values for the data lanes.
                            They are mapped to the lanes by the use of the reference name.

		Input:

      # general options:
      * 'genomesize'      : Genome Size in base pairs
      * 'stamp'           : Short title of the atlas. Valid enumerations are:
								           'Custom'
                           'DNA Blast Atlas'
                           'Protein Blast Atlas'
                           'Genome Atlas'
                           'ADNA Atlas'
                           'ZDNA Atlas'
                           'Structure Atlas'
                           'Repeat Atlas'
                           'Cruciform Atlas'
                           'Base Atlas'
      * 'main'            : Main title of the atlas
      * 'sub'             : Sub title of the atlas

      # this element is optional, and applies only for linear atlases
      * 'window'  
       * 'begin'          : Start position for atlas
       * 'end'            : Stop position for atlas
      * 'modus'           : Atlas geometry: either 'linear' or 'circle'

      # annotations
      * 'annotations'    
       * 'entry'           (array)
        * 'featurename'   : E.g. CDS, tRNA, rRNA
         * 'dir'          : Either 'pos' or 'neg'
         * 'legend'       : A legend to be used for this annotation (E.g. 'CDS +', 'CDS -', 'tRNA', 'rRNA')
         * 'mark'         : Leave as is, 'fillarrow mark'
         * 'color'          color of the annotation
          * 'r'           : Red color component 0 .. 1
          * 'g'           : Green color component 0 .. 1
          * 'b'           : Blue color component 0 .. 1

      # data
      * 'data'           
       * 'entry'            (array)
        * 'boxfilter'     : (optional) Smoothing level. Usually, Genome size / 500 is a good option.
        * 'ref'           : A reference name to be used for this data. In lanes and files declaration, 
                            there must exist identical references.
        * 'legend'        : Legend to be plotted in the atlas, for this lane.
       
      # lanes
      * 'lanes' 
       * 'entry'          : (array) 
        * 'ref'           : A reference name, corresponding to what was declared in files and data/annotation section

        # You have a CHOICE of the next 2 items at this level: Any given lane
        # can either be annotation or data

				# This is your first option
        * 'ann'
         * 'entry'        : (array)
          * 'featurename' : Feature name, e.g. CDS, rRNA, tRNA etc.
          * 'dir'         : (optinal) If defined, must either be 'pos' or 'neg'

        # This is your second option 
        * 'dat'
         * 'color'
          * 'from'
           * 'r'          : Red color component 0 .. 10
           * 'g'          : Green color component 0 .. 10
           * 'b'          : Blue color component 0 .. 10
          * 'to'
           * 'r'          : Red color component 0 .. 10
           * 'g'          : Green color component 0 .. 10
           * 'b'          : Blue color component 0 .. 10
          
          # This element is optional
          * 'via'
           * 'r'          : Red color component 0 .. 10
           * 'g'          : Green color component 0 .. 10
           * 'b'          : Blue color component 0 .. 10
 
          # You have a CHOICE of the next 2 items at this level
          # You can either choose to let our data be scaled a number of standard deviations around
          # the average or letting it be scaled using a fixed range.

          # This is your first option
          * 'byaverage'
           * 'stddev'     : Scaling is done this many standard deviations around the average

          # This is your second option
          * 'byrange'
           * 'bottom'     : Lower boundary
           * 'top'        : Upper boundary
      # files
        * 'files'
         * 'entry'        : (array)
          * 'ref'         : The reference name

          # You have a CHOICE of the next 2 items at this level
          # This can either be a definition of an annotation source 
          # or of a data source
          # 

          # This is your first choice
          * 'ann'
           * 'features'
            * 'feature'
             * 'type'     : Feature type, e.g. CDS, rRNa, tRNA
             * 'begin'    : Lower boundary of the annotation
             * 'end'      : Upper boundary of the annotation
             * 'dir'      : Direction / straind ('+' or '-' )
             * 'label'    : e.g. dnaA

          # This is your second option
          * 'dat'
           * 'values'     : Comma separated list of numerical values. Superfluous numbers will 
                         be removed

		Output:
        * 'jobid'         : The 32 byte identification string of the job
        * 'datetime'      : The last timepoint at which the status of the job has changed
        * 'status'        : Possible values are QUEUED, ACTIVE, FINISHED, WAITING, REJECTED, 
					                  UNKNOWN JOBID or QUEUE DOWN
        * 'expire'        : Amount of hours since your job will expire

	2. pollQueue
	Once obtained from 'runGenewiz', a job identification can be used to poll the
	status to see if the result is ready for download.

		Input:
        * 'jobid'         : The 32 byte identification string of the job
		Output:
        * 'jobid'         : The 32 byte identification string of the job
        * 'datetime'      : The last timepoint at which the status of the job has changed
        * 'status'        : Possible values are QUEUED, ACTIVE, FINISHED, WAITING, REJECTED, 
					                  UNKNOWN JOBID or QUEUE DOWN
	3. fetchResult
	Once the status is 'FINISHED' the result can by downloaded using this operation

		Input:
        * 'jobid'         : The 32 byte identification string of the job
		Output:
        * 'ps'  
         * 'comment'      : Document comment
         * 'encoding'     : Encoding of the binary content of the image (base64)
         * 'MIMEtype'     : Data format
         * 'content'      : Encoded binary content
        * 'pdf' 
         * 'comment'      : Document comment
         * 'encoding'     : Encoding of the binary content of the image (base64)
         * 'MIMEtype'     : Data format
         * 'content'      : Encoded binary content
</documentation>
		<port name="WSGeneWiz_1_0a_ws0" binding="tns:WSGeneWiz_1_0a_ws0">
			<soapenv:address location="http://ws.cbs.dtu.dk:80/cgi-bin/soap/ws/quasi.cgi?log"/>
		</port>
	</service>
</wsdl:definitions>
