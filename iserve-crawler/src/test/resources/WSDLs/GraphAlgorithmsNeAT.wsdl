<?xml version="1.0" encoding="UTF-8"?>
<definitions 
       name="graphtools" 
       targetNamespace="urn:graphtools"
         xmlns:tns="urn:graphtools" 
         xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
         xmlns="http://schemas.xmlsoap.org/wsdl/" 
         xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
         xmlns:html="http://www.w3.org/1999/xhtml" 
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:java="http://schemas.xmlsoap.org/wsdl/java/" 
         xmlns:format="http://schemas.xmlsoap.org/wsdl/formatbinding/" >

  <!-- type defs -->
  <types>
    <xsd:schema targetNamespace="urn:graphtools" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema">

      <xsd:complexType name="PathfinderRequest">
      	  <xsd:annotation>
	  		<xsd:documentation>Parameters for the operation pathfinding.</xsd:documentation>
        </xsd:annotation>
      	<xsd:sequence>
      		<xsd:element maxOccurs="1" minOccurs="1" name="source" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The source nodes, separated by '/'. Instead of the source nodes, a batch string can be provided. In this case, the target nodes should not be set. For the batch format, see the manual of the k-shortest path finding tool in NeAT.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element maxOccurs="1" minOccurs="1" name="target" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The target nodes, separated by '/'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="nodesPresent" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Identifiers of nodes that should be present in each path.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="nodesAbsent" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Identifiers of nodes that should be absent from each path.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="graphString" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The input graph. Can be either a graph identifier or the graph string. You can instead provide the name of a temp graph file (see below).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="tmpInGraphFile" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The temp graph file is the name of a graph file on the server. Instead, a graph string can be given (see above).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="inFormat" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The format of the input graph. Can be either 'GML' (GML graph format, also 'gml' is accepted), 'KGML' (KEGG KGML format, 'kgml' is also accepted), 'BioPax' ('biopax' is also accepted) or 'flat' (tab-delimited, 'tab' is also accepted). Irreversible reactions in KGML and Biopax files are kept. For BioPax format, the value of the NAME attribute is parsed as node identifier. Default is 'flat'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="outFormat" type="xsd:string">
      		 	<xsd:annotation>
	  				<xsd:documentation>The output format in case a graph is returned. Can be either 'GML' (GML graph format, also 'gml' is accepted) or 'flat' (tab-delimited, also 'tab' is accepted). Default is 'flat'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="directed" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, the graph is treated as directed, else as undirected. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="metabolic" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, the graph is a metabolic graph. A metabolic graph has values for the
	  				attributes 'ObjectType' (to distinguish reactions and compounds) and the given exclusion attribute. Notice that BioPax and KGML graphs are by default metabolic. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="exclusionAttr" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The name of the exclusion attribute. Nodes having the same value for this
	  				attribute are mutually exclusive, that is they cannot both appear in the same path. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="weight" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Either a list of tab-delimited element/weight pairs or the name of a weighting scheme.
	  				Weighting schemes are: 'con' for degree of node as its weight and 'unit' for unit weight on each node.
	  				If weight is either empty String or 'none', weights given in the input graph are used. Default is 'unit'.
	  				Two additional weighting schemes are available for RPAIR graphs: 'rpairs' and 'rpairsunit'.
	  				</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="algorithm" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Path finding algorithm. Can be 'rea' (REA, Jimenez and Marzal, 1999) or 'backtrack' (as in Croes et al., 2005). The latter option is only available for metabolic graphs. Default is 'rea'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="rank" type="xsd:int">
      		  	<xsd:annotation>
	  				<xsd:documentation>Number of requested ranks. Default is 1.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="maxWeight" type="xsd:int">
      		  	<xsd:annotation>
	  				<xsd:documentation>Maximal weight (distance) of solution paths. Default is 1000000.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="maxLength" type="xsd:int">
      		  	<xsd:annotation>
	  				<xsd:documentation>Maximal length of solution paths. Default is 1000000.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="minLength" type="xsd:int">
      			<xsd:annotation>
	  				<xsd:documentation>Minimal length of solution paths. Default is 0.</xsd:documentation>
       			</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="attribs" type="xsd:string">
      			<xsd:annotation>
	  				<xsd:documentation>Attributes of the input graph that should be mapped on the solution graph. Individual attributes are separated by '/', edge/arc attributes are preceded by 'ARCS'. Example: 'color/rgb_colorARCSweight/color' sets values for the color and rgb_color attribute on nodes and for the color and weight attribute on arcs (if values for these attributes are present in the input graph).</xsd:documentation>
       			</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="outputType" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Can be either 'pathsTable' for a table of paths, 'pathsMarked' for paths mapped on input graph,
	  				 'pathsGraphs' for paths as separate components of one graph or 'pathsUnion' for paths as graph union. Default is 'pathsTable'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="storeInputGraph" type="xsd:boolean">
      			  <xsd:annotation>
	  				<xsd:documentation>If true, store input graph and its temp files on server, else delete them after end of calculation. Setting this option to true will speed up Pathfinder the next time the same graph is used. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="returnType" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or 'both'. Default is 'both'.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="PathwayinferenceRequest">
      	  <xsd:annotation>
	  		<xsd:documentation>Parameters for the operation pathwayinference.</xsd:documentation>
        </xsd:annotation>
      	<xsd:sequence>
      		<xsd:element name="seeds" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The seed nodes, separated by '/'. Instead of the seed nodes, a batch file string may be provided (see below).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="batch" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>A string containing the content of a batch file. For the batch file format, see the manual of the metabolic pathway inference tool in NeAT. Instead of the batch string, seed nodes may be provided (see above).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="graphString" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The input graph. Can be either a graph identifier or the graph string. You can instead provide the name of a temp graph file (see below).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="tmpInGraphFile" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The temp graph file is the name of a graph file on the server. Instead, a graph string can be given (see above).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="inFormat" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The format of the input graph. Can be either 'GML' (GML graph format, also 'gml' is accepted), 'KGML' (KEGG KGML format, 'kgml' is also accepted), 'BioPax' ('biopax' is also accepted) or 'flat' (tab-delimited, also 'tab' is accepted). Default is 'flat'. Note that for KGML and BioPax, irreversible reactions are converted into reversible ones. Use option 'keepIrreversible' to prevent this.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="outFormat" type="xsd:string">
      		 	<xsd:annotation>
	  				<xsd:documentation>The output format in case a graph is returned. Can be either 'GML' (GML graph format, also 'gml' is accepted) or 'flat' (tab-delimited, also 'tab' is accepted). Default is 'flat'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="directed" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, the graph is treated as directed, else as undirected. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="keepIrreversible" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, KGML and Biopax files are read in without converting irreversible reactions into reversible ones. For BioPax format, the value of the NAME attribute is parsed as node identifier. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="asymmetric" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>Directed metabolic graphs are by default treated as being symmetric, that is containing for each direct reaction its reverse. If asymmetric is true, one of the two directions of a reaction may be absent. Note that this option applies only to metabolic graphs, all other directed graphs are by default treated as asymmetric. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="metabolic" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, the graph is a metabolic graph. A metabolic graph has values for the
	  				attributes 'ObjectType' (to distinguish reactions and compounds) and the given exclusion attribute. Notice that BioPax and KGML graphs are by default metabolic graphs. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="exclusionAttr" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The name of the exclusion attribute. Nodes having the same value for this
	  				attribute are mutually exclusive, that is they cannot both appear in the same path. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="weight" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Either a list of tab-delimited element/weight pairs or the name of a weighting scheme.
	  				Weighting schemes are: 'con' for degree of node as its weight and 'unit' for unit weight on each node.
	  				If weight is either empty String or 'none', weights given in the input graph are used. Default is 'con'.
	  				Two additional weighting schemes are available for RPAIR graphs: 'rpairs' and 'rpairsunit'.
	  				</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="algorithm" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Pathwayinference algorithm. Can be 'rea' (based on REA, Jimenez and Marzal, 1999), 'kwalks' (kWalks algorithm by Jerome Callut and Pierre Dupont) or 'hybrid' (a mixture of the former two). In addition, the algorithm 'takahashi' (Takahashi and Matsuyama, 1980) is available, also in combination with kWalks ('takahashihybrid').  Default is 'hybrid'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
			<xsd:element name="preproc" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>Preprocess the seed nodes. During preprocessing, seed nodes sharing main reactions are connected. Only available if the input graph is an RPAIR graph. Default is 'false'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
			<xsd:element name="postproc" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>Postprocess the seed nodes. During postprocessing, it is attempted to connect components of the solution subgraph by calling the selected pathwayinference algorithm. Default is 'false'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="prune" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>Prune the results of the kWalks algorithm. During pruning, all branches not ending in seed nodes are removed from the solution subgraph. Default is 'false'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="reuseWeights" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>For hybrid algorithms: Use the relevances computed by kWalks as weights for the second step rather than the original weights. Default is 'false'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="iter" type="xsd:int">
      		  	<xsd:annotation>
	  				<xsd:documentation> Number of times the kWalks algorithm is iterated. Default is 1.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        		<xsd:element name="percentage" type="xsd:double">
      		  	<xsd:annotation>
	  				<xsd:documentation>Percentage of input graph that is extracted by kWalks in the hybrid algorithm. Default is 0.005.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="attribs" type="xsd:string">
      			<xsd:annotation>
	  				<xsd:documentation>Attributes of the input graph that should be mapped on the solution graph. Individual attributes are separated by '/', edge/arc attributes are preceded by 'ARCS'.
	  				Example: 'color/rgb_colorARCSweight/color' sets values for the color and rgb_color attribute on nodes and for the color and weight attribute on arcs (if values for these attributes are present in the input graph).</xsd:documentation>
       			</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="outputType" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Can be either 'pathsTable' for a table of paths, 'pathsMarked' for paths mapped on input graph,
	  				 'pathsGraphs' for paths as separate components of one graph or 'pathsUnion' for paths as graph union. Default is 'pathsTable'.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="storeInputGraph" type="xsd:boolean">
      			  <xsd:annotation>
	  				<xsd:documentation>If true, store input graph and its temp files on server, else delete them after end of calculation. Setting this option to true will speed up Pathwayinference the next time the same graph is used. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="returnType" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or 'both'. Default is 'both'.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="GraphConverterRequest">
      	  <xsd:annotation>
	  		<xsd:documentation>Parameters for the operation graphconversion.</xsd:documentation>
        </xsd:annotation>
      	<xsd:sequence>
      		<xsd:element name="graphString" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The input graph. Represents the graph string. A temp graph file name can be provided instead (see below).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="tmpInGraphFile" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The temp graph file is the name of a graph file on the server. Instead, a graph string can be given (see above).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element maxOccurs="1" minOccurs="1" name="inFormat" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The format of the input graph. Can be either 'GML' (GML graph format, 'gml' is also accepted), 'flat' (tab-delimited, 'tab' is also accepted), 'KGML' (KEGG KGML format, 'kgml' is also accepted), 'BioPax' ('biopax' is also accepted) or 'gdl'. For KGML and BioPax, exclusion attribute values are available under 'ExclusionAttribute'. Irreversible reactions in KGML and Biopax files are kept. For BioPax format, the value of the NAME attribute is parsed as node identifier.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element maxOccurs="1" minOccurs="1" name="outFormat" type="xsd:string">
      		 	<xsd:annotation>
	  				<xsd:documentation>The format of the output graph. Can be either 'GML' (GML graph format, 'gml' is also accepted), 'gdl', 'Dot' ('dot'), 'Pajek' ('pajek'), 'VisML' ('visml') or 'flat' (tab-delimited, 'tab' is also accepted).</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="directed" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, the graph is treated as directed, else as undirected. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="nodeAttribs" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Node attributes. Separated by '/'. Default is an empty String.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="edgeAttribs" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Edge attributes. Separated by '/'. Default is an empty String.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="noNodes" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, only edges are exported into flat file (edge list). Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="returnType" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or 'both'. Default is 'both'.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="MetabolicGraphConstructorRequest">
      	  <xsd:annotation>
	  		<xsd:documentation>Parameters for the operation metabolicgraphconstruction.</xsd:documentation>
        </xsd:annotation>
      	<xsd:sequence>
      		<xsd:element name="organismNames" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The KEGG abbreviations of requested organisms, separated by '/'. To build graphs from reference KGML files, use 'reference'. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
        	<xsd:element name="organismFile" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The name of a file on the server side holding KEGG organism abbreviations, one by line. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="reactionIds" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>The KEGG identifiers of reactions used for graph construction. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="reactionFile" type="xsd:string">
      		 	<xsd:annotation>
	  				<xsd:documentation>The name of a file on the server side holding KEGG reaction identifiers, one by line. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="directed" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, a directed graph is constructed, else an undirected graph. Default is false. Directed graphs include for each reaction two nodes: One for the forward and one for the reverse direction. Use option 'keepIrreversible' to keep irreversible reactions.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="keepIrreversible" type="xsd:boolean">
      		  	<xsd:annotation>
	  				<xsd:documentation>If true, irreversible reactions are not converted into reversible reactions. Default is false.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="graphType" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Can be either reaction graph (r) or RPAIR graph (s). Default is r.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="attributes" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Attributes for nodes and arcs/edges. The following attributes can be set: Label (compound name, reaction KEGG identifier), FORMULA (compound formula), ENZYME (enzymes associated to reaction, set by default, but NOT for RPAIR graphs), ObjectType (Reaction or Compound, set by default), ExclusionAttribute (exclusion attribute for direct and reverse reaction directions, set by default), Exclusion.Group (for RPAIR graphs only, group of exclusive reactant pairs, set on reaction nodes by default), RPAIRS.Linkage.Type (for RPAIR graphs only, RPAIR class, set on arcs/edges by default), ECNumber (EC number associated to reaction), Equation (set on reactions). Separated by '/'. Setting of non-default attributes slows down graph construction! Default is an empty String. Default attributes will be set irrespectively of the value of this parameter.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="outFormat" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>The format of the output graph. Can be either 'GML' (GML graph format, 'gml' is also accepted), 'gdl', 'Dot' ('dot'), 'VisML' ('visml') or 'flat' (tab-delimited, 'tab' is also accepted). Default is flat.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="excludeCompounds" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>KEGG identifiers of compounds to exclude. Separated by '/'. Default is an empty String.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="excludeReactions" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>KEGG identifiers of reactions to exclude. Separated by '/'. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="excludeRPairClasses" type="xsd:string">
      		  	<xsd:annotation>
	  				<xsd:documentation>Names of RPAIR classes to exclude. Reactant pairs only belonging to these classes are excluded. Valid RPAIR classes are: main, cofac, trans, ligase, leave. Separated by '/'. Default is an empty String.</xsd:documentation>
        		</xsd:annotation>
        	</xsd:element>
      		<xsd:element name="returnType" type="xsd:string">
      			<xsd:annotation>
	      			<xsd:documentation>Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or 'both'. Default is 'both'.</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="WorkFlowRequest">
      	<xsd:sequence>
      	<xsd:element maxOccurs="unbounded" minOccurs="1" name="requestArray" type="tns:mixedRequest">
      		<xsd:annotation>
      			<xsd:documentation>A list of mixedRequest elements. Each mixedRequest should contain exactly one request, which can be either a PathfinderRequest, a GraphConverterRequest, a PathwayinferenceRequest or a MetabolicGraphConstructorRequest. The requests are executed in the given order. Note that returnType fields of requests are ignored.</xsd:documentation>
      		</xsd:annotation>
      	</xsd:element>
      	<xsd:element name="email" nillable="true" type="xsd:string">
      			<xsd:annotation>
      			<xsd:documentation>Email address to which result should be sent. Default is an empty String. If no email has been set, results are sent via the response object.</xsd:documentation>
      		</xsd:annotation>
      	</xsd:element>
      	<xsd:element name="returnType" nillable="true" type="xsd:string">
      		<xsd:annotation>
	      		<xsd:documentation>Return type. Accepted values: 'server' (result is stored on a file on the server), 'client' (result is directly transferred to the client), or 'both'. Default is 'both'.</xsd:documentation>
      		</xsd:annotation>
      	</xsd:element>
      	</xsd:sequence>
      </xsd:complexType>

 	<complexType name="mixedRequest">
         <all>
           <element name="PathfinderRequest" type="tns:PathfinderRequest"/>
           <element name="GraphConverterRequest" type="tns:GraphConverterRequest"/>
           <element name="MetabolicGraphConstructorRequest" type="tns:MetabolicGraphConstructorRequest"/>
            <element name="PathwayinferenceRequest" type="tns:PathwayinferenceRequest"/>
         </all>
    </complexType>

      <xsd:complexType name="PathfinderResponse">
       	<xsd:sequence>
       		<xsd:element name="server" type="xsd:string">
       		  	<xsd:annotation>
	      			<xsd:documentation>Location of the result file on the server. This can be used as input for a further request.
	      			If an error occurred and returnType equals 'server', the error message instead of the server location is returned.
	      			</xsd:documentation>
	   			</xsd:annotation>
	    	</xsd:element>
       		<xsd:element name="command" type="xsd:string">
       			<xsd:annotation>
	      			<xsd:documentation>The stand alone command executed on the server.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       		<xsd:element name="client" type="xsd:string">
       		 	<xsd:annotation>
	      			<xsd:documentation>The results.
	      			If an error occurred and returnType equals 'client', the error message instead of the result is returned.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       		<xsd:element name="graphid" type="xsd:string">
       		<xsd:annotation>
	      		<xsd:documentation>The identifier of the input graph, assigned by Pathfinder.</xsd:documentation>
	    	</xsd:annotation>
	  	</xsd:element>
       	</xsd:sequence>
      </xsd:complexType>

         <xsd:complexType name="PathwayinferenceResponse">
       	<xsd:sequence>
       		<xsd:element name="server" type="xsd:string">
       		  	<xsd:annotation>
	      			<xsd:documentation>Location of the result file on the server. This can be used as input for a further request.
	      			If an error occurred and returnType equals 'server', the error message instead of the server location is returned.
	      			</xsd:documentation>
	   			</xsd:annotation>
	    	</xsd:element>
       		<xsd:element name="command" type="xsd:string">
       			<xsd:annotation>
	      			<xsd:documentation>The stand alone command executed on the server.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       		<xsd:element name="client" type="xsd:string">
       		 	<xsd:annotation>
	      			<xsd:documentation>The results.
	      			If an error occurred and returnType equals 'client', the error message instead of the result is returned.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       		<xsd:element name="graphid" type="xsd:string">
       		<xsd:annotation>
	      		<xsd:documentation>The identifier of the input graph, assigned by Pathwayinference.</xsd:documentation>
	    	</xsd:annotation>
	  	</xsd:element>
       	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="GraphConverterResponse">
       	<xsd:sequence>
       		<xsd:element name="server" type="xsd:string">
       		  	<xsd:annotation>
	      			<xsd:documentation>Location of the result file on the server. This can be used as input for a further request.
	      			If an error occurred and returnType equals 'server', the error message instead of the server location is returned.
	      			</xsd:documentation>
	   			</xsd:annotation>
	    	</xsd:element>
       		<xsd:element name="command" type="xsd:string">
       			<xsd:annotation>
	      			<xsd:documentation>The stand alone command executed on the server.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       		<xsd:element name="client" type="xsd:string">
       		 	<xsd:annotation>
	      			<xsd:documentation>The results.
	      			If an error occurred and returnType equals 'client', the error message instead of the result is returned.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="MetabolicGraphConstructorResponse">
       	<xsd:sequence>
       		<xsd:element name="server" type="xsd:string">
       		  	<xsd:annotation>
	      			<xsd:documentation>Location of the result file on the server. This can be used as input for a further request.
	      			If an error occurred and returnType equals 'server', the error message instead of the server location is returned.
	      			</xsd:documentation>
	   			</xsd:annotation>
	    	</xsd:element>
       		<xsd:element name="command" type="xsd:string">
       			<xsd:annotation>
	      			<xsd:documentation>The stand alone command executed on the server.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       		<xsd:element name="client" type="xsd:string">
       		 	<xsd:annotation>
	      			<xsd:documentation>The results.
	      			If an error occurred and returnType equals 'client', the error message instead of the result is returned.</xsd:documentation>
	    		</xsd:annotation>
	  		</xsd:element>
       	</xsd:sequence>
      </xsd:complexType>

      <xsd:complexType name="WorkFlowResponse">
      	<xsd:sequence>
      		<xsd:element name="server" type="xsd:string">
      			<xsd:annotation>
      				<xsd:documentation>
      					Location of the result file on the server.
      					This field is only set if no email address was
      					specified. The result file can be used as
      					input for a further request. If an error
      					occurred and returnType equals 'server', the
      					error message instead of the server location
      					is returned.
      				</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="command" type="xsd:string">
      			<xsd:annotation>
      				<xsd:documentation>
      					The stand alone command executed on the
      					server.
      				</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="client" type="xsd:string">
      			<xsd:annotation>
      				<xsd:documentation>
      					The results. This field is only set if no
      					email address was specified. If an error
      					occurred and returnType equals 'client', the
      					error message instead of the result is
      					returned.
      				</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      		<xsd:element name="graphid" nillable="true" type="xsd:string">
      			<xsd:annotation>
      				<xsd:documentation>
      					The identifier of the input graph, assigned by
      					Pathfinder/Pathwayinference. Only set if a PathfinderRequest/PathwayinferenceRequest is
      					in the request list and its storeInputGraph field has been set to true.
      					If several such PathfinderRequests/PathwayinferenceRequest have been provided, the identifier for
      					the last PathfinderRequest/PathwayinferenceRequest is set.
      				</xsd:documentation>
      			</xsd:annotation>
      		</xsd:element>
      	</xsd:sequence>
      </xsd:complexType>

      <xsd:element name="pathfinding">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="request" type="tns:PathfinderRequest"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="pathfindingResponse">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="response" type="tns:PathfinderResponse"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

        <xsd:element name="pathwayinference">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="request" type="tns:PathwayinferenceRequest"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="pathwayinferenceResponse">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="response" type="tns:PathwayinferenceResponse"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="graphconversion">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="request" type="tns:GraphConverterRequest"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="graphconversionResponse">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="response" type="tns:GraphConverterResponse"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="metabolicgraphconstruction">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="request" type="tns:MetabolicGraphConstructorRequest"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="metabolicgraphconstructionResponse">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="response" type="tns:MetabolicGraphConstructorResponse"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="workflow">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="request" type="tns:WorkFlowRequest"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

      <xsd:element name="workflowResponse">
      	<xsd:complexType>
      		<xsd:sequence>
      			<xsd:element name="response" type="tns:WorkFlowResponse"/>
      		</xsd:sequence>
      	</xsd:complexType>
      </xsd:element>

    </xsd:schema>

  </types>

  <!-- message declns -->
  <message name="pathfindingRequest">
    <part element="tns:pathfinding" name="parameters"/>
  </message>

  <message name="pathfindingResponse">
    <part element="tns:pathfindingResponse" name="output"/>
  </message>

   <message name="pathwayinferenceRequest">
    <part element="tns:pathwayinference" name="parameters"/>
  </message>

  <message name="pathwayinferenceResponse">
    <part element="tns:pathwayinferenceResponse" name="output"/>
  </message>

  <message name="graphconversionRequest">
    <part element="tns:graphconversion" name="parameters"/>
  </message>

  <message name="graphconversionResponse">
    <part element="tns:graphconversionResponse" name="output"/>
  </message>

  <message name="metabolicgraphconstructionRequest">
    <part element="tns:metabolicgraphconstruction" name="parameters"/>
  </message>

  <message name="metabolicgraphconstructionResponse">
    <part element="tns:metabolicgraphconstructionResponse" name="output"/>
  </message>

  <message name="workflowRequest">
    <part element="tns:workflow" name="parameters"/>
  </message>

  <message name="workflowResponse">
    <part element="tns:workflowResponse" name="output"/>
  </message>

  <!-- port type declns -->
  <portType name="GraphAlgorithms">
    <operation name="pathfinding">
    	<documentation>Enumerate the k shortest paths between a set of source nodes and a set of target nodes in weighted graphs.</documentation>
      <input message="tns:pathfindingRequest" name="PathfinderRequest"/>
      <output message="tns:pathfindingResponse" name="PathfinderResponse"/>
    </operation>
    <operation name="pathwayinference">
    <documentation>Infer subgraphs from weighted graphs given a set of seed nodes or seed node groups.</documentation>
      <input message="tns:pathwayinferenceRequest" name="PathwayinferenceRequest"/>
      <output message="tns:pathwayinferenceResponse" name="PathwayinferenceResponse"/>
    </operation>
    <operation name="graphconversion">
      <documentation>Convert a graph in gml, gdl, Biopax, KGML or tab-delimited format into a graph in gml, gdl, pajek, tab-delimited, dot or VisML format.</documentation>
      <input message="tns:graphconversionRequest" name="GraphConverterRequest"/>
      <output message="tns:graphconversionResponse" name="GraphConverterResponse"/>
    </operation>
    <operation name="metabolicgraphconstruction">
    <documentation>Construct a metabolic graph specific for a set of organisms from KEGG KGML files.</documentation>
      <input message="tns:metabolicgraphconstructionRequest" name="MetabolicGraphConstructorRequest"/>
      <output message="tns:metabolicgraphconstructionResponse" name="MetabolicGraphConstructorResponse"/>
    </operation>
    <operation name="workflow">
      <input message="tns:workflowRequest" name="WorkFlowRequest"/>
      <output message="tns:workflowResponse" name="WorkFlowResponse"/>
    </operation>
  </portType>

  <!-- binding declns -->
  <binding name="graphtoolsSOAPBinding" type="tns:GraphAlgorithms">
  	<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
  	<operation name="pathfinding">
  		<soap:operation soapAction=""/>
  		<input>
  			<soap:body use="literal"/>
  		</input>
  		<output>
  			<soap:body use="literal"/>
  		</output>
  	</operation>
  	<operation name="pathwayinference">
  		<soap:operation soapAction=""/>
  		<input>
  			<soap:body use="literal"/>
  		</input>
  		<output>
  			<soap:body use="literal"/>
  		</output>
  	</operation>
  	<operation name="graphconversion">
  		<soap:operation soapAction=""/>
  		<input>
  			<soap:body use="literal"/>
  		</input>
  		<output>
  			<soap:body use="literal"/>
  		</output>
  	</operation>
  	<operation name="metabolicgraphconstruction">
  		<soap:operation soapAction=""/>
  		<input>
  			<soap:body use="literal"/>
  		</input>
  		<output>
  			<soap:body use="literal"/>
  		</output>
  	</operation>
  	<operation name="workflow">
  		<soap:operation soapAction=""/>
  		<input>
  			<soap:body use="literal"/>
  		</input>
  		<output>
  			<soap:body use="literal"/>
  		</output>
  	</operation>
  </binding>

  <!-- service decln -->
  <service name="graphtools">
  	<documentation>Graphtools webservice. Contact: Karoline Faust (kfaust@ulb.ac.be)</documentation>
  	<port binding="tns:graphtoolsSOAPBinding" name="GraphAlgorithms">
<soap:address location="http://wwwsup.scmbb.ulb.ac.be/be.ac.ulb.bigre.graphtools.server/services/GraphAlgorithms"/>
  	</port>
  </service>
</definitions>
