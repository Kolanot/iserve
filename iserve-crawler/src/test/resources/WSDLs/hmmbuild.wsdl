<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:impl="http://nbcr.sdsc.edu/opal" xmlns:intf="http://nbcr.sdsc.edu/opal" xmlns:tns1="http://nbcr.sdsc.edu/opal/types" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://nbcr.sdsc.edu/opal">
<wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">hmmbuild: profile HMM construction from multiple sequence alignments
    
# hmmbuild :: profile HMM construction from multiple sequence alignments
# HMMER 3.0 (March 2010); http://hmmer.org/
# Copyright (C) 2010 Howard Hughes Medical Institute.
# Freely distributed under the GNU General Public License (GPLv3).
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Usage: hmmbuild [-options] &lt;hmmfile output&gt; &lt;alignment file input&gt;

where basic options are:
  -h     : show brief help on version and usage
  -n &lt;s&gt; : name the HMM &lt;s&gt;
  -o &lt;f&gt; : direct summary output to file &lt;f&gt;, not stdout
  -O &lt;f&gt; : resave annotated, possibly modified MSA to file &lt;f&gt;

Options for selecting alphabet rather than guessing it:
  --amino : input alignment is protein sequence data
  --dna   : input alignment is DNA sequence data
  --rna   : input alignment is RNA sequence data

Alternative model construction strategies:
  --fast           : assign cols w/ &gt;= symfrac residues as consensus  [default]
  --hand           : manual construction (requires reference annotation)
  --symfrac &lt;x&gt;    : sets sym fraction controlling --fast construction  [0.5]
  --fragthresh &lt;x&gt; : if L &lt; x&lt;L&gt;, tag sequence as a fragment  [0.5]

Alternative relative sequence weighting strategies:
  --wpb     : Henikoff position-based weights  [default]
  --wgsc    : Gerstein/Sonnhammer/Chothia tree weights
  --wblosum : Henikoff simple filter weights
  --wnone   : don't do any relative weighting; set all to 1
  --wgiven  : use weights as given in MSA file
  --wid &lt;x&gt; : for --wblosum: set identity cutoff  [0.62]  (0&lt;=x&lt;=1)

Alternate effective sequence weighting strategies:
  --eent       : adjust eff seq # to achieve relative entropy target  [default]
  --eclust     : eff seq # is # of single linkage clusters
  --enone      : no effective seq # weighting: just use nseq
  --eset &lt;x&gt;   : set eff seq # for all models to &lt;x&gt;
  --ere &lt;x&gt;    : for --eent: set minimum rel entropy/position to &lt;x&gt;
  --esigma &lt;x&gt; : for --eent: set sigma param to &lt;x&gt;  [45.0]
  --eid &lt;x&gt;    : for --eclust: set fractional identity cutoff to &lt;x&gt;  [0.62]

Control of E-value calibration:
  --EmL &lt;n&gt; : length of sequences for MSV Gumbel mu fit  [200]  (n&gt;0)
  --EmN &lt;n&gt; : number of sequences for MSV Gumbel mu fit  [200]  (n&gt;0)
  --EvL &lt;n&gt; : length of sequences for Viterbi Gumbel mu fit  [200]  (n&gt;0)
  --EvN &lt;n&gt; : number of sequences for Viterbi Gumbel mu fit  [200]  (n&gt;0)
  --EfL &lt;n&gt; : length of sequences for Forward exp tail tau fit  [100]  (n&gt;0)
  --EfN &lt;n&gt; : number of sequences for Forward exp tail tau fit  [200]  (n&gt;0)
  --Eft &lt;x&gt; : tail mass for Forward exponential tail tau fit  [0.04]  (0&lt;x&lt;1)

Other options:
  --cpu &lt;n&gt;      : number of parallel CPU workers for multithreads
  --stall        : arrest after start: for debugging MPI under gdb
  --informat &lt;s&gt; : assert input alifile is in format &lt;s&gt; (no autodetect)
  --seed &lt;n&gt;     : set RNG seed to &lt;n&gt; (if 0: one-time arbitrary seed)  [42]
  --laplace      : use a Laplace +1 prior

    
    </wsdl:documentation>
<!--WSDL created by Apache Axis version: 1.2.1
Built on Jun 14, 2005 (09:15:57 EDT)-->
 <wsdl:types>
  <schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://nbcr.sdsc.edu/opal/types">
   <import namespace="http://xml.apache.org/xml-soap"/>
   <complexType name="AppMetadataInputType">
    <sequence/>
   </complexType>
   <element name="getAppMetadataInput" type="tns1:AppMetadataInputType"/>
   <complexType name="FlagsType">
    <sequence>
     <element name="id" type="xsd:ID"/>
     <element name="tag" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="default" nillable="true" type="xsd:boolean"/>
     <element maxOccurs="1" minOccurs="0" name="textDesc" type="xsd:string"/>
    </sequence>
   </complexType>
   <complexType name="FlagsArrayType">
    <sequence>
     <element maxOccurs="unbounded" minOccurs="0" name="flag" type="tns1:FlagsType"/>
    </sequence>
   </complexType>
   <simpleType name="ParamType">
    <restriction base="xsd:string">
     <enumeration value="INT"/>
     <enumeration value="BOOL"/>
     <enumeration value="FLOAT"/>
     <enumeration value="STRING"/>
     <enumeration value="FILE"/>
     <enumeration value="URL"/>
    </restriction>
   </simpleType>
   <simpleType name="IOType">
    <restriction base="xsd:string">
     <enumeration value="INPUT"/>
     <enumeration value="OUTPUT"/>
     <enumeration value="INOUT"/>
    </restriction>
   </simpleType>
   <complexType name="ParamsType">
    <sequence>
     <element name="id" type="xsd:ID"/>
     <element maxOccurs="1" minOccurs="0" name="tag" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="default" nillable="true" type="xsd:string"/>
     <element name="paramType" type="tns1:ParamType"/>
     <element maxOccurs="1" minOccurs="0" name="ioType" type="tns1:IOType"/>
     <element maxOccurs="1" minOccurs="0" name="required" type="xsd:boolean"/>
     <element maxOccurs="unbounded" minOccurs="0" name="value" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="semanticType" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="textDesc" type="xsd:string"/>
    </sequence>
   </complexType>
   <complexType name="ParamsArrayType">
    <sequence>
     <element maxOccurs="1" minOccurs="0" name="separator" type="xsd:string"/>
     <element maxOccurs="unbounded" minOccurs="0" name="param" type="tns1:ParamsType"/>
    </sequence>
   </complexType>
   <complexType name="ImplicitParamsType">
    <sequence>
     <element name="id" type="xsd:ID"/>
     <element maxOccurs="1" minOccurs="0" name="name" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="extension" type="xsd:string"/>
     <element name="ioType" type="tns1:IOType"/>
     <element maxOccurs="1" minOccurs="0" name="required" type="xsd:boolean"/>
     <element maxOccurs="1" minOccurs="0" name="semanticType" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="textDesc" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="min" type="xsd:int"/>
     <element maxOccurs="1" minOccurs="0" name="max" type="xsd:int"/>
    </sequence>
   </complexType>
   <complexType name="ImplicitParamsArrayType">
    <sequence>
     <element maxOccurs="unbounded" minOccurs="0" name="param" type="tns1:ImplicitParamsType"/>
    </sequence>
   </complexType>
   <complexType name="GroupsType">
    <sequence>
     <element maxOccurs="1" minOccurs="0" name="id" type="xsd:ID"/>
     <element name="name" type="xsd:string"/>
     <element name="elements" type="xsd:IDREFS"/>
     <element maxOccurs="1" minOccurs="0" name="required" type="xsd:boolean"/>
     <element maxOccurs="1" minOccurs="0" name="exclusive" type="xsd:boolean"/>
     <element maxOccurs="1" minOccurs="0" name="semanticType" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="textDesc" type="xsd:string"/>
    </sequence>
   </complexType>
   <complexType name="GroupsArrayType">
    <sequence>
     <element maxOccurs="unbounded" minOccurs="0" name="group" type="tns1:GroupsType"/>
    </sequence>
   </complexType>
   <complexType name="ArgumentsType">
    <sequence>
     <element maxOccurs="1" minOccurs="0" name="flags" type="tns1:FlagsArrayType"/>
     <element maxOccurs="1" minOccurs="0" name="taggedParams" type="tns1:ParamsArrayType"/>
     <element maxOccurs="1" minOccurs="0" name="untaggedParams" type="tns1:ParamsArrayType"/>
     <element maxOccurs="1" minOccurs="0" name="implicitParams" type="tns1:ImplicitParamsArrayType"/>
     <element maxOccurs="1" minOccurs="0" name="groups" type="tns1:GroupsArrayType"/>
    </sequence>
   </complexType>
   <complexType name="AppMetadataType">
    <sequence>
     <element name="usage" type="xsd:string"/>
     <element maxOccurs="unbounded" minOccurs="0" name="info" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="version" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="types" type="tns1:ArgumentsType"/>
    </sequence>
    <attribute name="appName" type="xsd:string"/>
   </complexType>
   <element name="getAppMetadataOutput" type="tns1:AppMetadataType"/>
   <complexType name="FaultType">
    <sequence>
     <element name="message" nillable="true" type="xsd:string"/>
    </sequence>
   </complexType>
   <element name="opalFaultOutput" type="tns1:FaultType"/>
   <complexType name="AppConfigInputType">
    <sequence/>
   </complexType>
   <element name="getAppConfigInput" type="tns1:AppConfigInputType"/>
   <complexType name="AppConfigType">
    <sequence>
     <element name="metadata" type="tns1:AppMetadataType"/>
     <element name="binaryLocation" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="defaultArgs" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="validateArgs" type="xsd:boolean"/>
     <element maxOccurs="1" minOccurs="0" name="jobManagerFQCN" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="globusGatekeeper" type="xsd:anyURI"/>
     <element maxOccurs="1" minOccurs="0" name="gridftpBase" type="xsd:anyURI"/>
     <element name="parallel" type="xsd:boolean"/>
    </sequence>
   </complexType>
   <element name="getAppConfigOutput" type="tns1:AppConfigType"/>
   <complexType name="InputFileType">
    <sequence>
     <element name="name" type="xsd:string"/>
     <element maxOccurs="1" minOccurs="0" name="contents" type="xsd:base64Binary"/>
     <element maxOccurs="1" minOccurs="0" name="location" type="xsd:anyURI"/>
     <element maxOccurs="1" minOccurs="0" name="attachment" type="apachesoap:DataHandler"/>
    </sequence>
   </complexType>
   <complexType name="JobInputType">
    <xsd:sequence xmlns:opal="http://nbcr.sdsc.edu/opal/types">
<xsd:element type="xsd:boolean" name="amino" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>input alignment is protein sequence data</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="dna" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>input alignment is DNA sequence data</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="rna" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>input alignment is RNA sequence data</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="fast" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>assign cols w/ &gt;= symfrac residues as consensus</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="hand" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>manual construction (requires reference annotation)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="wpb" minOccurs="0" maxOccurs="1" default="true">
<xsd:annotation>
<xsd:documentation>Henikoff position-based weights</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="wgsc" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>Gerstein/Sonnhammer/Chothia tree weights</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="wblosum" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>Henikoff simple filter weights</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="wnone" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>don't do any relative weighting; set all to 1</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="wgiven" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>use weights as given in MSA file</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="eent" minOccurs="0" maxOccurs="1" default="true">
<xsd:annotation>
<xsd:documentation>adjust eff seq # to achieve relative entropy target</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="eclust" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>eff seq # is # of single linkage clusters</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="enone" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>no effective seq # weighting: just use nseq</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:boolean" name="laplace" minOccurs="0" maxOccurs="1" default="false">
<xsd:annotation>
<xsd:documentation>use a Laplace +1 prior</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="name" maxOccurs="1" minOccurs="0" type="xsd:string">
<xsd:annotation>
<xsd:documentation>name of the HMM</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="outputFile" maxOccurs="1" minOccurs="0" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Direct summary output to a file, not stdout</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="resave" maxOccurs="1" minOccurs="0" type="xsd:string">
<xsd:annotation>
<xsd:documentation>resave annotated, possibly modified MSA to file</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="symfrac" maxOccurs="1" minOccurs="0" type="xsd:string">
<xsd:annotation>
<xsd:documentation>sets sym fraction controlling --fast construction</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="fragthresh" maxOccurs="1" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>if L &lt; x, tag sequence as a fragment</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="wid" maxOccurs="1" minOccurs="0" type="xsd:float">
<xsd:annotation>
<xsd:documentation>for --wblosum: set identity cutoff (0&lt;=x&lt;=1) [default=0.62]</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="eset" maxOccurs="1" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>set eff seq # for all models</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="ere" maxOccurs="1" minOccurs="0" type="xsd:float">
<xsd:annotation>
<xsd:documentation>for --eent: set minimum rel entropy/position</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="esigma" maxOccurs="1" default="45.0" minOccurs="0" type="xsd:float">
<xsd:annotation>
<xsd:documentation>for --eent: set sigma param</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="eid" maxOccurs="1" minOccurs="0" type="xsd:float">
<xsd:annotation>
<xsd:documentation>for --eclust: set fractional identity cutoff [default=0.62]</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EmL" maxOccurs="1" default="200" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>length of sequences for MSV Gumbel mu fit  (n&gt;0)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EmN" maxOccurs="1" default="200" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>number of sequences for MSV Gumbel mu fit  (n&gt;0)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EvL" maxOccurs="1" default="200" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>length of sequences for Viterbi Gumbel mu fit  (n&gt;0)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EvN" maxOccurs="1" default="200" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>number of sequences for Viterbi Gumbel mu fit  (n&gt;0)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EfL" maxOccurs="1" default="100" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>length of sequences for Forward exp tail tau fit (n&gt;0)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="EfN" maxOccurs="1" default="200" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>number of sequences for Forward exp tail tau fit (n&gt;0)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="Eft" maxOccurs="1" default="0.04" minOccurs="0" type="xsd:float">
<xsd:annotation>
<xsd:documentation>tail mass for Forward exponential tail tau fit (0&lt;x&lt;1)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="seed" maxOccurs="1" default="42" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>set RNG seed to given value (if 0: one-time arbitrary seed)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="informat" maxOccurs="1" minOccurs="0" type="xsd:string">
<xsd:annotation>
<xsd:documentation>assert input alifile is in format [s] (no autodetect)</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="cpu" maxOccurs="1" minOccurs="0" type="xsd:integer">
<xsd:annotation>
<xsd:documentation>number of parallel CPU workers to use for multithreads</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="output" maxOccurs="1" default="output.hmm" minOccurs="1" type="xsd:string">
<xsd:annotation>
<xsd:documentation>Generated HMM file name</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element name="alignment" maxOccurs="1" minOccurs="1" type="tns1:InputFileType">
<xsd:annotation>
<xsd:documentation>The alignement file to transform into an HMM</xsd:documentation>
</xsd:annotation>
</xsd:element>
<xsd:element type="xsd:int" name="numProcs" minOccurs="0" maxOccurs="1"/>
<xsd:element type="xsd:nonNegativeInteger" name="wallClockTime" minOccurs="0" maxOccurs="1"/>
<xsd:element type="xsd:string" name="userEmail" minOccurs="0" maxOccurs="1"/>
<xsd:element type="xsd:string" name="password" minOccurs="0" maxOccurs="1"/>
<xsd:element type="xsd:boolean" name="sendNotification" minOccurs="0" maxOccurs="1"/>
</xsd:sequence>
   </complexType>
   <element name="launchJobInput" type="tns1:JobInputType"/>
   <complexType name="StatusOutputType">
    <sequence>
     <element name="code" type="xsd:int"/>
     <element name="message" type="xsd:string"/>
     <element name="baseURL" type="xsd:anyURI"/>
    </sequence>
   </complexType>
   <complexType name="JobSubOutputType">
    <sequence>
     <element name="jobID" type="xsd:string"/>
     <element name="status" type="tns1:StatusOutputType"/>
    </sequence>
   </complexType>
   <element name="launchJobOutput" type="tns1:JobSubOutputType"/>
   <element name="launchJobBlockingInput" type="tns1:JobInputType"/>
   <complexType name="OutputFileType">
    <sequence>
     <element name="name" type="xsd:string"/>
     <element name="url" type="xsd:anyURI"/>
    </sequence>
   </complexType>
   <complexType name="JobOutputType">
    <sequence>
     <element maxOccurs="1" minOccurs="0" name="stdOut" type="xsd:anyURI"/>
     <element maxOccurs="1" minOccurs="0" name="stdErr" type="xsd:anyURI"/>
     <element maxOccurs="unbounded" minOccurs="0" name="outputFile" type="tns1:OutputFileType"/>
    </sequence>
   </complexType>
   <complexType name="BlockingOutputType">
    <sequence>
     <element name="status" type="tns1:StatusOutputType"/>
     <element name="jobOut" type="tns1:JobOutputType"/>
    </sequence>
   </complexType>
   <element name="launchJobBlockingOutput" type="tns1:BlockingOutputType"/>
   <element name="queryStatusInput" type="xsd:string"/>
   <element name="queryStatusOutput" type="tns1:StatusOutputType"/>
   <element name="getJobStatisticsInput" type="xsd:string"/>
   <complexType name="JobStatisticsType">
    <sequence>
     <element maxOccurs="1" minOccurs="0" name="startTime" type="xsd:dateTime"/>
     <element maxOccurs="1" minOccurs="0" name="activationTime" type="xsd:dateTime"/>
     <element maxOccurs="1" minOccurs="0" name="completionTime" type="xsd:dateTime"/>
    </sequence>
   </complexType>
   <element name="getJobStatisticsOutput" type="tns1:JobStatisticsType"/>
   <element name="getOutputsInput" type="xsd:string"/>
   <element name="getOutputsOutput" type="tns1:JobOutputType"/>
   <complexType name="OutputsByNameInputType">
    <sequence>
     <element name="jobID" type="xsd:string"/>
     <element name="fileName" type="xsd:string"/>
    </sequence>
   </complexType>
   <element name="getOutputAsBase64ByNameInput" type="tns1:OutputsByNameInputType"/>
   <element name="getOutputAsBase64ByNameOutput">
    <complexType>
     <sequence>
      <element maxOccurs="unbounded" minOccurs="0" name="item" type="xsd:byte"/>
     </sequence>
    </complexType>
   </element>
   <element name="destroyInput" type="xsd:string"/>
   <element name="destroyOutput" type="tns1:StatusOutputType"/>
  </schema>
 </wsdl:types>

   <wsdl:message name="getJobStatisticsRequest">

      <wsdl:part element="tns1:getJobStatisticsInput" name="getJobStatisticsInput"/>

   </wsdl:message>

   <wsdl:message name="getAppConfigRequest">

      <wsdl:part element="tns1:getAppConfigInput" name="getAppConfigInput"/>

   </wsdl:message>

   <wsdl:message name="getOutputAsBase64ByNameRequest">

      <wsdl:part element="tns1:getOutputAsBase64ByNameInput" name="getOutputAsBase64ByNameInput"/>

   </wsdl:message>

   <wsdl:message name="FaultType">

      <wsdl:part element="tns1:opalFaultOutput" name="opalFaultOutput"/>

   </wsdl:message>

   <wsdl:message name="getOutputAsBase64ByNameResponse">

      <wsdl:part element="tns1:getOutputAsBase64ByNameOutput" name="getOutputAsBase64ByNameOutput"/>

   </wsdl:message>

   <wsdl:message name="getJobStatisticsResponse">

      <wsdl:part element="tns1:getJobStatisticsOutput" name="getJobStatisticsOutput"/>

   </wsdl:message>

   <wsdl:message name="getAppConfigResponse">

      <wsdl:part element="tns1:getAppConfigOutput" name="getAppConfigOutput"/>

   </wsdl:message>

   <wsdl:message name="getAppMetadataRequest">

      <wsdl:part element="tns1:getAppMetadataInput" name="getAppMetadataInput"/>

   </wsdl:message>

   <wsdl:message name="launchJobResponse">

      <wsdl:part element="tns1:launchJobOutput" name="launchJobOutput"/>

   </wsdl:message>

   <wsdl:message name="getOutputsResponse">

      <wsdl:part element="tns1:getOutputsOutput" name="getOutputsOutput"/>

   </wsdl:message>

   <wsdl:message name="getAppMetadataResponse">

      <wsdl:part element="tns1:getAppMetadataOutput" name="getAppMetadataOutput"/>

   </wsdl:message>

   <wsdl:message name="launchJobRequest">

      <wsdl:part element="tns1:launchJobInput" name="launchJobInput"/>

   </wsdl:message>

   <wsdl:message name="destroyResponse">

      <wsdl:part element="tns1:destroyOutput" name="destroyOutput"/>

   </wsdl:message>

   <wsdl:message name="launchJobBlockingResponse">

      <wsdl:part element="tns1:launchJobBlockingOutput" name="launchJobBlockingOutput"/>

   </wsdl:message>

   <wsdl:message name="queryStatusResponse">

      <wsdl:part element="tns1:queryStatusOutput" name="queryStatusOutput"/>

   </wsdl:message>

   <wsdl:message name="queryStatusRequest">

      <wsdl:part element="tns1:queryStatusInput" name="queryStatusInput"/>

   </wsdl:message>

   <wsdl:message name="destroyRequest">

      <wsdl:part element="tns1:destroyInput" name="destroyInput"/>

   </wsdl:message>

   <wsdl:message name="getOutputsRequest">

      <wsdl:part element="tns1:getOutputsInput" name="getOutputsInput"/>

   </wsdl:message>

   <wsdl:message name="launchJobBlockingRequest">

      <wsdl:part element="tns1:launchJobBlockingInput" name="launchJobBlockingInput"/>

   </wsdl:message>

   <wsdl:portType name="AppServicePortType">

      <wsdl:operation name="getAppMetadata" parameterOrder="getAppMetadataInput">

         <wsdl:input message="impl:getAppMetadataRequest" name="getAppMetadataRequest"/>

         <wsdl:output message="impl:getAppMetadataResponse" name="getAppMetadataResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Returns metadata about the application. This includes usage information, along with any number of arbitrary application-specific metadata specified as an array of info elements, e.g. description of the various options that are passed to the application binary.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="getAppConfig" parameterOrder="getAppConfigInput">

         <wsdl:input message="impl:getAppConfigRequest" name="getAppConfigRequest"/>

         <wsdl:output message="impl:getAppConfigResponse" name="getAppConfigResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      </wsdl:operation>

      <wsdl:operation name="launchJob" parameterOrder="launchJobInput">

         <wsdl:input message="impl:launchJobRequest" name="launchJobRequest"/>

         <wsdl:output message="impl:launchJobResponse" name="launchJobResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Requires all the parameters with correct type, and structures representing the input files. The structure contains the name of the input file and either the contents in Base64 encoded binary form or a MIME attachment, or simply a location (URL) to the associated file. The operation returns a Job ID that can be used to retrieve job status and outputs.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="launchJobBlocking" parameterOrder="launchJobBlockingInput">

         <wsdl:input message="impl:launchJobBlockingRequest" name="launchJobBlockingRequest"/>

         <wsdl:output message="impl:launchJobBlockingResponse" name="launchJobBlockingResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Same as launchJob but blocks until the remote execution is complete, and returns job outputs (as described above) as the response. This operation may only be appropriate for jobs that are not long running.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="queryStatus" parameterOrder="queryStatusInput">

         <wsdl:input message="impl:queryStatusRequest" name="queryStatusRequest"/>

         <wsdl:output message="impl:queryStatusResponse" name="queryStatusResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Expects a Job ID to query the status of a running job. A status code, message, and URL of the working directory for the job are returned.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="getJobStatistics" parameterOrder="getJobStatisticsInput">

         <wsdl:input message="impl:getJobStatisticsRequest" name="getJobStatisticsRequest"/>

         <wsdl:output message="impl:getJobStatisticsResponse" name="getJobStatisticsResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Returns basic job statistics including start time, activation time and completion time for a given Job ID.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="getOutputs" parameterOrder="getOutputsInput">

         <wsdl:input message="impl:getOutputsRequest" name="getOutputsRequest"/>

         <wsdl:output message="impl:getOutputsResponse" name="getOutputsResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">returns the outputs from a job that is identified by a Job ID. The output consists of the urls for the standard output and error, and an array of structures representing the output files. The structure contains the name of the output file and the url from where it can be downloaded.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="getOutputAsBase64ByName" parameterOrder="getOutputAsBase64ByNameInput">

         <wsdl:input message="impl:getOutputAsBase64ByNameRequest" name="getOutputAsBase64ByNameRequest"/>

         <wsdl:output message="impl:getOutputAsBase64ByNameResponse" name="getOutputAsBase64ByNameResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Returns the contents of an output file as Base64 binary. The input is a data structure that contains the Job ID for a particular job, and the name of the file to be retrieved.</wsdl:documentation>
</wsdl:operation>

      <wsdl:operation name="destroy" parameterOrder="destroyInput">

         <wsdl:input message="impl:destroyRequest" name="destroyRequest"/>

         <wsdl:output message="impl:destroyResponse" name="destroyResponse"/>

         <wsdl:fault message="impl:FaultType" name="FaultType"/>

      <wsdl:documentation xmlns:opal="http://nbcr.sdsc.edu/opal/types">Destroys a running job identified by a Job ID.</wsdl:documentation>
</wsdl:operation>

   </wsdl:portType>

   <wsdl:binding name="AppServicePortSoapBinding" type="impl:AppServicePortType">

      <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

      <wsdl:operation name="getAppMetadata">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/getAppMetadata"/>

         <wsdl:input name="getAppMetadataRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="getAppMetadataResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="getAppConfig">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/getAppConfig"/>

         <wsdl:input name="getAppConfigRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="getAppConfigResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="launchJob">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/launchJob"/>

         <wsdl:input name="launchJobRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="launchJobResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="launchJobBlocking">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/launchJobBlocking"/>

         <wsdl:input name="launchJobBlockingRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="launchJobBlockingResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="queryStatus">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/queryStatus"/>

         <wsdl:input name="queryStatusRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="queryStatusResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="getJobStatistics">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/getJobStatistics"/>

         <wsdl:input name="getJobStatisticsRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="getJobStatisticsResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="getOutputs">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/getOutputs"/>

         <wsdl:input name="getOutputsRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="getOutputsResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="getOutputAsBase64ByName">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/getOutputAsBase64ByName"/>

         <wsdl:input name="getOutputAsBase64ByNameRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="getOutputAsBase64ByNameResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

      <wsdl:operation name="destroy">

         <wsdlsoap:operation soapAction="http://nbcr.sdsc.edu/opal/destroy"/>

         <wsdl:input name="destroyRequest">

            <wsdlsoap:body use="literal"/>

         </wsdl:input>

         <wsdl:output name="destroyResponse">

            <wsdlsoap:body use="literal"/>

         </wsdl:output>

         <wsdl:fault name="FaultType">

            <wsdlsoap:fault name="FaultType" use="literal"/>

         </wsdl:fault>

      </wsdl:operation>

   </wsdl:binding>

   <wsdl:service name="hmmbuild">

      <wsdl:port binding="impl:AppServicePortSoapBinding" name="AppServicePort">

         <wsdlsoap:address location="http://webservices.genouest.org/opal2/services/hmmbuild"/>

      </wsdl:port>

   </wsdl:service>

</wsdl:definitions>
