<?xml version="1.0" encoding="UTF-8"?>
<definitions name="Scooby_Domain_Prediction"
	targetNamespace="Scooby"
	xmlns="http://schemas.xmlsoap.org/wsdl/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="Scooby"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema">
 
 	
	<types>
		<xsd:schema targetNamespace="Scooby">
 		
			<!-- ***** ***** ***** types for literal/wrapped style ***** ***** ***** -->
			<xsd:complexType name="ticketType">
				<xsd:sequence>
					<xsd:element name="ticket" type="xsd:string" maxOccurs="1" />
				</xsd:sequence>
			</xsd:complexType>
			
			<xsd:complexType name="FastaType">
				<xsd:sequence>
					<xsd:element name="FASTA" type="xsd:string" maxOccurs="1" />
					<!-- DOMCUT parameter values: DOMCUT_B (default), DOMCUT, 0 -->
					<xsd:element name="DOMCUT" type="tns:DOMCUTType" maxOccurs="1" default="DOMCUT_B" />
				</xsd:sequence>
			</xsd:complexType>
			
			<xsd:complexType name="ProtIdType">
				<xsd:sequence>
					<xsd:element name="UniProt_RefSeq_ID" type="xsd:string" maxOccurs="1" />
					<!-- DOMCUT parameter values: DOMCUT_B (default), DOMCUT, 0 -->
					<xsd:element name="DOMCUT" type="tns:DOMCUTType" maxOccurs="1" default="DOMCUT_B" />
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="DOMCUTType">
				<xsd:annotation>
					<xsd:documentation>
					DOMCUT parameter values: 
					DOMCUT_B (default),
					DOMCUT,
					0
					</xsd:documentation>
				</xsd:annotation>
				<xsd:simpleContent>
					<xsd:extension base="xsd:string"></xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>			

			<xsd:complexType name="response">
				<xsd:sequence>
					<xsd:element name="response" type="xsd:string" maxOccurs="1" />
				</xsd:sequence>
			</xsd:complexType>
			
			<xsd:complexType name="resultsResponseType">
   				<xsd:sequence>
					<xsd:element name="version" type="xsd:string"/>
					<xsd:element name="ticket" type="xsd:string"/>
					<xsd:element name="sequences" type="tns:sequencesType"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="sequencesType">
				<xsd:sequence>
					<xsd:element name="sequence" type="tns:sequenceType" minOccurs="1" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>			

			<xsd:complexType name="sequenceType">
				<xsd:sequence>
					<xsd:element name="id" type="tns:seqId"/>
					<xsd:element name="ranks" type="tns:ranksType"/> 
				</xsd:sequence>
				<xsd:attribute name="protID" type="xsd:string" use="required"/>
			</xsd:complexType>

			<xsd:complexType name="seqId">
				<xsd:simpleContent>
					<xsd:extension base="xsd:string">
						<xsd:attribute name="found" type="xsd:boolean" use="required"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
					
			<xsd:complexType name="ranksType">
   				<xsd:sequence>
				    <xsd:element name="rank" type="tns:iterationType" minOccurs="1" maxOccurs="10"/>
				</xsd:sequence>
			</xsd:complexType>
						            
			<xsd:complexType name="resultsResponseTypeWrapper">
				<xsd:sequence>
					<xsd:element name="resultsResponse" type="tns:resultsResponseType"/>
				</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="statusResponseType">
				<xsd:sequence>
					<xsd:element name="status" type="tns:statusType"/>
				</xsd:sequence>
			</xsd:complexType>
            
			<!-- definition of the status return type -->
			<xsd:complexType name="statusType">
				<xsd:annotation>
					<xsd:documentation>
						Successfull completion: completed == true AND status == 1
						In case no valid input is provided a ticket with value "0" was returned.
						All status and statusString values:
						1, "Completed";
						0, "Queued/Running";
						-1, "Crashed";
						-2, "Ticket not found";
						-3, "Submission problems: either no valid Protein ID or FASTA record".
					</xsd:documentation>
				</xsd:annotation>
				<xsd:sequence>
					<!-- the boolean flag 'completed' states whether the task is still running or has already finished -->
					<xsd:element name="completed" type="xsd:boolean" default="false" />
					<!-- once the job is completed, the 'status' will give a information code about success, error, failure, ... -->
					<xsd:element name="statusCode" type="xsd:int" default="0" />
					<xsd:element name="statusString" type="xsd:string" />
					</xsd:sequence>
			</xsd:complexType>

			<xsd:complexType name="iterationType">
				<xsd:simpleContent>
					<xsd:extension base="xsd:string">
						<xsd:attribute name="num" type="xsd:int" use="required"/>
						<xsd:attribute name="score" type="xsd:float" use="required"/>
						<xsd:attribute name="pred" type="xsd:int" use="required"/>
					</xsd:extension>
				</xsd:simpleContent>
			</xsd:complexType>
			
			
			<!-- ***** ***** ***** elements for service method input ***** ***** ***** -->
			<xsd:element name="doScoobyById" type="tns:ProtIdType" />
			<xsd:element name="doScoobyBySeq" type="tns:FastaType" />
			<xsd:element name="doScoobyByIdAsync" type="tns:ProtIdType" />
			<xsd:element name="getResults" type="tns:ticketType" />
			<xsd:element name="getStatus" type="tns:ticketType"/>
        
			<!-- ***** ***** ***** elements for service method output ***** ***** ***** -->
			<xsd:element name="doScoobyByIdResponse" type="tns:resultsResponseTypeWrapper" />	
			<xsd:element name="doScoobyBySeqResponse" type="tns:resultsResponseTypeWrapper" />	
			<xsd:element name="doScoobyByIdAsyncResponse" type="tns:ticketType" />
			<xsd:element name="getResultsResponse" type="tns:resultsResponseTypeWrapper"/>
			<xsd:element name="getStatusResponse" type="tns:statusResponseType"/>
		
		</xsd:schema>
	</types>


	<!-- ***** ***** ***** input messages ***** ***** ***** --> 
	<message name="ScoobySeqMsg">
		<part name="parameters" element="tns:doScoobyBySeq"/>
		<!-- <documentation> -->
		<!--	DOMCUT parameter values: DOMCUT_B (default), DOMCUT, 0 -->
   		<!-- </documentation> -->
	</message>
	<message name="doScoobyByIdMsg">
		<part name="parameters" element="tns:doScoobyById"/>
	</message>
	<message name="doScoobyByIdAsyncMsg">
		<part name="parameters" element="tns:doScoobyByIdAsync"/>
	</message>
	<message name="getResultsMsg">
		<part name="Ticket" element="tns:getResults"/>
	</message>	
	<message name="getStatusMsg">
		<part name="Ticket" element="tns:getStatus"/>
	</message>
	
	
	<!-- ***** ***** ***** output messages ***** ***** ***** -->
	<message name="ScoobyResponse">
		<part name="domain_pred" element="tns:response"/>
	</message>
	<message name="doScoobyByIdMsgResponse">
		<part name="domain_pred" element="tns:doScoobyByIdResponse"/>
	</message>
	<message name="doScoobyByIdAsyncMsgResponse">
		<part name="domain_pred" element="tns:doScoobyByIdAsyncResponse"/>
	</message>
	<message name="doScoobyBySeqMsgResponse">
		<part name="domain_pred" element="tns:doScoobyBySeqResponse"/>
	</message>
	<message name="getResultsMsgResponse">
		<part name="Ticket" element="tns:getResultsResponse"/>
	</message>
	<message name="statusMsgResponse">
        <part name="Status" element="tns:getStatusResponse"/>
	</message>
	
   
    <!-- ***** ***** ***** Interface (portType) with methods (operations) ***** ***** ***** -->
	<portType name="IBIVU_PortType">
		<operation name="doScoobyById">
			<input message="tns:doScoobyByIdMsg"/>
			<output message="tns:doScoobyByIdMsgResponse"/>
		</operation>
		<operation name="doScoobyBySeq">
			<input message="tns:ScoobySeqMsg"/>
			<output message="tns:doScoobyBySeqMsgResponse"/>
		</operation>
		<operation name="doScoobyByIdAsync">
			<input message="tns:doScoobyByIdAsyncMsg"/>
			<output message="tns:doScoobyByIdAsyncMsgResponse"/>
		</operation>
		<operation name="getResults">
			<input message="tns:getResultsMsg"/>
			<output message="tns:getResultsMsgResponse"/>
		</operation>		
		<operation name="getStatus">
			<input message="tns:getStatusMsg"/>
			<output message="tns:statusMsgResponse"/>
		</operation>
	</portType>

   
	<!-- ***** ***** ***** binding ***** ***** ***** -->   
	<binding name="IBIVU_Binding" type="tns:IBIVU_PortType">
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="doScoobyById">
			<soap:operation soapAction="Scooby#doScoobyById"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>		
		<operation name="doScoobyBySeq">
  			<soap:operation soapAction="Scooby#doScoobyBySeq"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>		
		<operation name="doScoobyByIdAsync">
  			<soap:operation soapAction="Scooby#doScoobyByIdAsync"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="getResults">
  			<soap:operation soapAction="Scooby#getResults"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
		<operation name="getStatus">
  			<soap:operation soapAction="Scooby#getStatus"/>
			<input>
				<soap:body use="literal"/>
			</input>
			<output>
				<soap:body use="literal"/>
			</output>
		</operation>
	</binding>
 
 
	<service name="Scooby_Domain_Prediction">
		<documentation>WSDL File for Scooby Domain Prediction</documentation>
		<port binding="tns:IBIVU_Binding" name="IBIVU_Port">
			<soap:address location="http://zeus.few.vu.nl/cgi-bin/scooby_srv_ebi.pl"/>
		</port>
	</service>
   
</definitions>
